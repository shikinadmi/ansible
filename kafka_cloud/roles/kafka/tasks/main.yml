---

# Описание роли и назначение
# Данные щаги используются для создания и удаления топиков и ACL в облаке VTB Cloud

# Конфигурация Kafka через Cloud API
# Данные щаги используются для создания и удаления топиков
# В качестве параметров используются:
# - kafka_cloud_item_id - идентификатор конфигурации
# - kafka_cloud_token_request_url - URL запроса для получения токена
# - kafka_cloud_token_request_urlencode_body - тело запроса для получения токена
# - kafka_cloud_action_url - URL запроса для создания топиков
# - kafka_cloud_topic_create_url - URL запроса для создания топиков
# - kafka_cloud_acl_create_url - URL запроса для создания ACL
# - kafka_cloud_transaction_acl_create_url - URL запроса для создания транзакционного ACL
# - kafka_cloud_action_headers - заголовки запроса
# - kafka_cloud_history_action_url - URL запроса для получения истории действий
# - kafka_cloud_action_id - идентификатор действия
# - kafka_cloud_topics_to_create - список топиков для создания
# - kafka_cloud_acls_to_create - список ACL для создания


- name: Получение токена доступа # Get access token
  block:
    - name: Проверка доступности к сервису VTB Cloud
      uri:
        url: "{{kafka_cloud_token_request_url}}"
      ignore_errors: yes

    - name: Получение токена SHELL
      shell: |
        curl --location \
            --header "Content-Type: application/x-www-form-urlencoded" \
            --data-urlencode "client_id={{kafka_cloud_sa_id}}" \
            --data-urlencode "client_secret={{kafka_cloud_sa_key}}" \
            --data-urlencode "grant_type=client_credentials" \
            --data-urlencode "scope=openid" \
            --request POST "{{kafka_cloud_token_request_url}}"
      ignore_errors: yes
      register: token_response

    - name: Получение токена
      uri:
        body_format: form-urlencoded
        body: "{{ kafka_cloud_token_request_urlencode_body }}"
#        follow_redirects: all
#        return_content: true
        status_code: 200
        url: "{{ kafka_cloud_token_request_url }}"
        method: POST
        validate_certs: no
#        timeout: 120
      register: token_response
      check_mode: no

    - name: Установка переменной токена
      set_fact:
        kafka_cloud_access_token: "{{ token_response.json.access_token }}"
      check_mode: no
  no_log: True

# Создание топиков через Cloud API
- name: Создание топиков через Cloud API с проверкой разницы между конфигурацией и списком топиков
  block:
    - name: Получение списка топиков и установка переменной списка топиков
      block:

        # Получение списка топиков и разницы между конфигурацией и списком топиков
        - name: Получение Списка топиков
          uri:
            url: "{{ kafka_cloud_order_info }}"
            method: GET
            headers: "{{ kafka_cloud_action_headers }}"
            validate_certs: no
          register: kafka_cloud_topics_list
          check_mode: no

        # Установка переменной списка топиков
        - name: Установка переменной списка топиков
          set_fact:
            cloud_topic_list: "{{ kafka_cloud_topics_list.json|json_query(topics_query)|flatten }}"
          vars:
          # topics_query: "data[?item_id=='{{ kafka_cloud_item_id }}'].data.config.topics[*].topic_name"
          topics_query: "data[].data.config.topics[].topic_name"

        # Вывод значения переменной cloud_topic_list
        - name: Вывод значения переменной cloud_topic_list
          debug:
            msg: "cloud_topic_list: {{ cloud_topic_list }}"

        # Получение разницы между конфигурацией и списком топиков
        - name: Получение разницы между конфигурацией и списком топиков
          set_fact:
            #            cloud_topics_diff: "{{ kafka_topics|json_query('[*].name')|difference(cloud_topic_list) }}"
            # Задать переменную cloud_topics_diff для получения списка разницы между конфигурацией
            # kafka_topics и cloud_topic_list(получамой список топиков json формата)
            cloud_topics_diff: "{{ kafka_topics_yaml|json_query('[*].name')|difference(cloud_topic_list) }}"

        - name: Вывод значения переменной cloud_topics_diff
          debug:
            msg: "cloud_topics_diff: {{ cloud_topics_diff }}"


    # Получение разницы между конфигурацией и списком топиков | Создание топиков через Cloud API
    - name: Получение разницы между конфигурацией и списком топиков | Создание топиков через Cloud API
      block:

        # Создание топиков через Cloud API
        - name: Установка конфигурации топиков для создания
          set_fact:
#            kafka_cloud_topics_to_create: "{{ kafka_cloud_topics_to_create }} + {{ kafka_topics|json_query(topics_query) }}"
            kafka_cloud_topics_to_create: "{{ kafka_cloud_topics_to_create }} + {{ kafka_topics_yaml|json_query(topics_query) }}"
          loop: "{{ cloud_topics_diff }}"
          vars:
            topics_query: "[?name=='{{ item }}']"

        - name: Вывод значения переменной kafka_cloud_topics_to_create
          debug:
            msg: "kafka_cloud_topics_to_create: {{ kafka_cloud_topics_to_create }}"

        # Использование Cloud API для создания топиков
        - name: Использование Cloud API
          uri:
            url: "{{ kafka_cloud_topic_create_url }}"
            method: PATCH
            headers: "{{ kafka_cloud_action_headers }}"
            body: "{{ lookup('template', 'templates/kafka_cloud/kafka-topics-add.j2') }}"
            body_format: json
            validate_certs: no
          register: kafka_cloud_topic_create_response

        - name: Вывод значения переменной kafka_cloud_topic_create_response
          debug:
            msg: "kafka_cloud_topic_create_response: {{ kafka_cloud_topic_create_response.json }}"

        # Установка переменной action_id для использования Cloud API в запросе на создание топиков
        - name: Установка переменной action_id
          set_fact:
            kafka_cloud_action_id: "{{ kafka_cloud_topic_create_response.json.action_id }}"

        # Проверка статуса действия
        - name: Проверка статуса действия
          include_tasks: kafka-cloud/check-action-status.yml

      when: cloud_topics_diff|length > 0 # Проверка длины списка разницы между конфигурацией и списком топиков
  when: kafka_topics_config_enabled and kafka_topics_yaml is defined # Проверка наличия топиков в конфигурации

# Создание ACL через Cloud API
- name: Создать ACL через Cloud API | Удаление пустых ACL
  block:

    # Сортируем список ACL по имени топика | Удаление пустых ACL
    - name: Получение списка ACL с проверкой разницы между конфигурацией и списком ACL | Удаление ACL через Cloud API
      block:

        # Сортируем список топиков по имени
        - name: Установить факт kafka_acl_topic_by_name_list
          set_fact:
            kafka_acl_topic_by_name_list: "{{ kafka_acl_topic_list|json_query(acl_config_query) }}"
          vars:
            acl_config_query: "[?topic_type=='by_name'].{client_cn: client_cn, topic_type: topic_type, client_role: client_role, topic_names: sort(topic_names)}"

        # Устанавливаем список ACL kafka_acl_topic_by_name_list по имени топика из конфигурации kafka_acl_topic_list_yaml
        - name: Установить факт kafka_acl_topic_by_name_list
          set_fact:
            kafka_acl_topic_by_name_list: "{{ kafka_acl_topic_list_yaml|json_query(acl_config_query) }}"
          vars:
            acl_config_query: "[?topic_type=='by_name'].{client_cn: client_cn, topic_type: topic_type, client_role: client_role, topic_names: sort(topic_names)}"

        # Получаем список ACL из облака
        - name: Получить список ACL из облака
          uri:
            url: "{{ kafka_cloud_order_info }}"
            method: GET
            headers: "{{ kafka_cloud_action_headers }}"
            validate_certs: no
          register: kafka_cloud_acl_list
          check_mode: no

        # Сортируем список ACL по имени
        - name: Установить факт cloud_acl_list
          set_fact:
            cloud_acl_list: "{{ kafka_cloud_acl_list.json|json_query(acl_query)|json_query(acl_query_topic_list) }}"
          vars:
            acl_query: "data[?item_id=='{{ kafka_cloud_item_id }}'].data.config.acls[]"
            acl_query_topic_list: "[?topic_type=='by_name'].{client_cn: client_cn, topic_type: topic_type, client_role: client_role, topic_names: sort(topic_names)}"

        # Получаем разницу между конфигурацией и облаком
        - name: Получить разницу между конфигурацией и облаком
          set_fact:
            acl_diff: "{{ kafka_acl_topic_by_name_list|difference(cloud_acl_list) }}"

        # Устанавливаем факт kafka_cloud_acls_to_create
        - name: Установить факт kafka_cloud_acls_to_create
          set_fact:
            kafka_cloud_acls_to_create: "{{ kafka_cloud_acls_to_create + [{'client_cn': item.client_cn, 'client_role': item.client_role, 'topic_type': item.topic_type, 'topic_names': item.topic_names|difference(cloud_acl_list|json_query(acl_topic_query))}] }}"
          vars:
            acl_topic_query: "[?client_cn=='{{ item.client_cn }}' && client_role=='{{ item.client_role }}'].topic_names[]"
          loop: "{{ acl_diff }}"

        # Удаляем пустые списки ACL
        - name: Удалить пустые списки ACL
          set_fact:
            kafka_cloud_acls_to_create: "{{ kafka_cloud_acls_to_create|json_query(acl_topic_query) }}"
          vars:
            acl_topic_query: '[?not_null(topic_names)]'

    # Запрос на создание ACL
    - name: Запрос на создание ACL
      block:

        # Создаем ACL в облаке
        - name: Создать ACL в облаке
          uri:
            url: "{{ kafka_cloud_acl_create_url }}"
            method: PATCH
            headers: "{{ kafka_cloud_action_headers }}"
            body: "{{ lookup('template', 'templates/kafka_cloud/kafka-acl-add.j2') }}"
            body_format: json
            validate_certs: no
          register: kafka_cloud_acl_create_response

        # Устанавливаем факт kafka_cloud_action_id
        - name: Установить факт kafka_cloud_action_id
          set_fact:
            kafka_cloud_action_id: "{{ kafka_cloud_acl_create_response.json.action_id }}"

        # Проверяем статус действия
        - name: Проверить статус действия
          include_tasks: kafka-cloud/check-action-status.yml

      when: kafka_cloud_acls_to_create|length > 0
  when: kafka_acl_config_enabled and kafka_acl_topic_list_yaml is defined

# Создание транзакционной ACL через Cloud API
- name: Создать транзакционную ACL через Cloud API
  block:
    # Создание транзакционной ACL в облаке
    - name: Создать транзакционную ACL в облаке
      uri:
        url: "{{ kafka_cloud_transaction_acl_create_url }}"
        method: PATCH
        headers: "{{ kafka_cloud_action_headers }}"
        body: "{{ lookup('template', 'templates/kafka_cloud/kafka-transaction-acl-add.j2') }}"
        body_format: json
        validate_certs: no
      register: kafka_cloud_transaction_acl_create_response

    # Установка факта action_id
    - name: Установить факт action_id
      set_fact:
        kafka_cloud_action_id: "{{ kafka_cloud_transaction_acl_create_response.json.action_id }}"

    # Проверка статуса действия
    - name: Проверить статус действия
      include_tasks: kafka-cloud/check-action-status.yml
  when: kafka_transaction_acl_config_enabled and kafka_transaction_acl_list is defined

# Удаление ACL через Cloud API по имени топика PATH metod
# Удаляем только те ACL, которые отсутствуют в конфигурации и не созданы топики
# Устанавливаем факт kafka_cloud_acls_to_delete
# Усли отсутствует связанный топик в облаке, то удаляем ACL, определив разницу по наличию топиков

# Удаление ACL что не указаны в конфигурации
- name: Удалить ACL что не указаны в конфигурации
  block:

    # Получаем разницу между конфигурацией и облаком
    - name: Получить разницу между конфигурацией и облаком
      set_fact:
        acl_diff: "{{ kafka_acl_topic_by_name_list|difference(cloud_acl_list) }}"

    # Устанавливаем факт kafka_cloud_acls_to_delete
    - name: Установить факт kafka_cloud_acls_to_delete
      set_fact:
        kafka_cloud_acls_to_delete: "{{ acl_diff|json_query(acl_topic_query) }}"
      vars:
        acl_topic_query: "[?client_cn=='{{ item.client_cn }}' && client_role=='{{ item.client_role }}'].topic_names[]"
      loop: "{{ acl_diff }}"

    # Удаляем ACL
    - name: Удалить ACL
      uri:
        url: "{{ kafka_cloud_acl_delete_url }}"
        method: PATCH
        headers: "{{ kafka_cloud_action_headers }}"
        body: "{{ lookup('template', 'templates/kafka_cloud/kafka-acl-delete.j2') }}"
        body_format: json
        validate_certs: no
      register: kafka_cloud_acl_delete_response

    # Устанавливаем факт kafka_cloud_action_id
    - name: Установить факт kafka_cloud_action_id
      set_fact:
        kafka_cloud_action_id: "{{ kafka_cloud_acl_delete_response.json.action_id }}"

    # Проверяем статус действия
    - name: Проверить статус действия
      include_tasks: kafka-cloud/check-action-status.yml

  when: kafka_acl_config_enabled and kafka_acl_topic_list_yaml is defined

# Удаление топиков что не указаны в конфигурации
- name: Удалить топики что не указаны в конфигурации
  block:
    # Получаем разницу между конфигурацией и облаком
    - name: Получить разницу между конфигурацией и облаком
      set_fact:
        topic_diff: "{{ kafka_topics_yaml|difference(cloud_topic_list) }}"

    # Устанавливаем факт kafka_cloud_topics_to_delete
    - name: Установить факт kafka_cloud_topics_to_delete
      set_fact:
        kafka_cloud_topics_to_delete: "{{ topic_diff|json_query(topic_name_query) }}"
      vars:
        topic_name_query: "[?name=='{{ item }}'].name"
      loop: "{{ topic_diff }}"

    # Удаляем топики
    - name: Удалить топики
      uri:
        url: "{{ kafka_cloud_topic_delete_url }}"
        method: PATCH
        headers: "{{ kafka_cloud_action_headers }}"
        body: "{{ lookup('template', 'templates/kafka_cloud/kafka-topic-delete.j2') }}"
        body_format: json
        validate_certs: no
      register: kafka_cloud_topic_delete_response

    # Устанавливаем факт kafka_cloud_action_id
    - name: Установить факт kafka_cloud_action_id
      set_fact:
        kafka_cloud_action_id: "{{ kafka_cloud_topic_delete_response.json.action_id }}"

    # Проверяем статус действия
    - name: Проверить статус действия
      include_tasks: kafka-cloud/check-action-status.yml

  when: kafka_topics_config_enabled and kafka_topics_yaml is defined


...

## kafka_topics в yaml формате
#kafka_topics_yaml:
#  - name: "adsd.clients.event.reserve-passive-account-admin-order-created.v1"
#    partition: 1
#    retention: 1800000
#    cleanup_policy: "delete"
#    cleanup_limit_by: "time"
#  - name: "adsd.iabs.event.passive-personal-account-operating-day-closed.v1"
#    partition: 1
#    retention: 1800000
#    cleanup_policy: "delete"
#    cleanup_limit_by: "time"

## kafka_acl_topic_list в yaml формате
#kafka_acl_topic_list_yaml:
#  - client_cn: "APD05.01-730-kafka-rr-client-default"
#    topic_type: "by_name"
#    client_role: "producer"
#    topic_names:
#      - "adsd.iabs.event.passive-personal-account-operating-day-closed.v1"
#      - "adsd.clients.event.reserve-passive-account-admin-order-created.v1"
#  - client_cn: "APD05.01-730-kafka-rr-client-default"
#    topic_type: "by_name"
#    client_role: "consumer"
#    topic_names:
#      - "adsd.iabs.event.passive-personal-account-operating-day-closed.v1"
#      - "adsd.clients.event.reserve-passive-account-admin-order-created.v1"

# шаблон создания ACL через Cloud API
#  {
#    "item_id": "{{ kafka_cloud_item_id }}",
#    "order": {
#      "attrs": {
#        "acls": [
#          {% for kafka_acl in kafka_cloud_acls_to_create %}
#          {
#            "client_cn": "{{ kafka_acl.client_cn }}",
#            "topic_type": "{{ kafka_acl.topic_type }}",
#            "client_role": "{{ kafka_acl.client_role }}",
#            {% if kafka_acl.topic_names is defined %}
#            "topic_names": [
#              {% for topic_name in kafka_acl.topic_names %}
#              "{{ topic_name }}"{% if not loop.last %},{% endif %}
#              {% endfor %}
#            ]
#            {% else %}
#            "topic_name": "{{ kafka_acl.topic_name }}"
#            {% endif %}
#          }{% if not loop.last %},{% endif %}
#          {% endfor %}
#        ]
#      }
#    }
#  }

#шаблон удаления ACL через Cloud API
#  {
#    "item_id": "{{ kafka_cloud_item_id }}",
#    "order": {
#      "attrs": {
#        "acls": [
#          {% for kafka_acl in kafka_cloud_acls_to_delete %}
#          {
#            "client_cn": "{{ kafka_acl.client_cn }}",
#            "topic_type": "{{ kafka_acl.topic_type }}",
#            "client_role": "{{ kafka_acl.client_role }}",
#            {% if kafka_acl.topic_names is defined %}
#            "topic_names": [
#              {% for topic_name in kafka_acl.topic_names %}
#              "{{ topic_name }}"{% if not loop.last %},{% endif %}
#              {% endfor %}
#            ]
#            {% else %}
#            "topic_name": "{{ kafka_acl.topic_name }}"
#            {% endif %}
#          }{% if not loop.last %},{% endif %}
#          {% endfor %}
#        ]
#      }
#    }
#  }

# шаблон удаления топиков через Cloud API
#  {
#    "item_id": "{{ kafka_cloud_item_id }}",
#    "order": {
#      "attrs": {
#        "topics": [
#          {% for kafka_topic in kafka_cloud_topics_to_delete %}
#          {
#            "name": "{{ kafka_topic.name }}",
#            "partition": {{ kafka_topic.partition }},
#            "retention": {{ kafka_topic.retention }},
#            "cleanup_policy": "{{ kafka_topic.cleanup_policy }}",
#            "cleanup_limit_by": "{{ kafka_topic.cleanup_limit_by }}"
#          }{% if not loop.last %},{% endif %}
#          {% endfor %}
#        ]
#      }
#    }
#  }
