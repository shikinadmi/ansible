---

# Конфигурация Kafka через Cloud API
# Данные щаги используются для создания и удаления топиков
# В качестве параметров используются:
# - kafka_cloud_item_id - идентификатор конфигурации
# - kafka_cloud_token_request_url - URL запроса для получения токена
# - kafka_cloud_token_request_urlencode_body - тело запроса для получения токена
# - kafka_cloud_action_url - URL запроса для создания топиков
# - kafka_cloud_topic_create_url - URL запроса для создания топиков
# - kafka_cloud_acl_create_url - URL запроса для создания ACL
# - kafka_cloud_transaction_acl_create_url - URL запроса для создания транзакционного ACL
# - kafka_cloud_action_headers - заголовки запроса
# - kafka_cloud_history_action_url - URL запроса для получения истории действий
# - kafka_cloud_action_id - идентификатор действия
# - kafka_cloud_topics_to_create - список топиков для создания
# - kafka_cloud_acls_to_create - список ACL для создания


- name: Получение токена доступа # Get access token
  block:
    - name: check url
      uri:
        url: "{{kafka_cloud_token_request_url}}"
      ignore_errors: yes
    - name: Получение токена SHELL
      shell: |
        curl --location \
            --header "Content-Type: application/x-www-form-urlencoded" \
            --data-urlencode "client_id={{kafka_cloud_sa_id}}" \
            --data-urlencode "client_secret={{kafka_cloud_sa_key}}" \
            --data-urlencode "grant_type=client_credentials" \
            --data-urlencode "scope=openid" \
            --request POST "{{kafka_cloud_token_request_url}}"
      ignore_errors: yes
      register: token_response
    - name: Получение токена
      uri:
        body_format: form-urlencoded
        body: "{{ kafka_cloud_token_request_urlencode_body }}"
#        follow_redirects: all
#        return_content: true
#        status_code: 200
        url: "{{ kafka_cloud_token_request_url }}"
        method: POST
        validate_certs: no
#        timeout: 120
      register: token_response
      check_mode: no

    - name: Установка переменной токена
      set_fact:
        kafka_cloud_access_token: "{{ token_response.json.access_token }}"
      check_mode: no

    - name: Получение Списка топиков
      uri:
        url: "{{ kafka_cloud_order_info }}"
        method: GET
        headers: "{{ kafka_cloud_action_headers }}"
        validate_certs: no
      register: kafka_cloud_topics_list
      check_mode: no

    - name: Установка переменной списка топиков
      set_fact:
        cloud_topic_list: "{{ kafka_cloud_topics_list.json|json_query(topics_query)|flatten }}"
      vars:
        # topics_query: "data[?item_id=='{{ kafka_cloud_item_id }}'].data.config.topics[*].topic_name"
        topics_query: "data[].data.config.topics[].topic_name"
    - name: Вывод значения переменной cloud_topic_list
      debug:
        msg: "cloud_topic_list: {{ cloud_topic_list }}"
    - name: Получение разницы между конфигурацией и списком топиков
      set_fact:
        cloud_topics_diff: "{{ kafka_topics|json_query('[*].name')|difference(cloud_topic_list) }}"
    - name: Установка конфигурации топиков для создания
      set_fact:
        kafka_cloud_topics_to_create: "{{ kafka_cloud_topics_to_create }} + {{ kafka_topics|json_query(topics_query) }}"
      loop: "{{ cloud_topics_diff }}"
      vars:
        topics_query: "[?name=='{{ item }}']"
    - name: Использование Cloud API
      uri:
        url: "{{ kafka_cloud_topic_create_url }}"
        method: PATCH
        headers: "{{ kafka_cloud_action_headers }}"
        body: "{{ lookup('template', 'templates/kafka_cloud/kafka-topics-add.j2') }}"
        body_format: json
        validate_certs: no
      register: kafka_cloud_topic_create_response
    - name: Установка переменной action_id
      set_fact:
        kafka_cloud_action_id: "{{ kafka_cloud_topic_create_response.json.action_id }}"
    - name: Проверка статуса действия
      include_tasks: kafka-cloud/check-action-status.yml
    # Сортируем список топиков по имени
    - name: Установить факт kafka_acl_topic_by_name_list
      set_fact:
        kafka_acl_topic_by_name_list: "{{ kafka_acl_topic_list|json_query(acl_config_query) }}"
      vars:
        acl_config_query: "[?topic_type=='by_name'].{client_cn: client_cn, topic_type: topic_type, client_role: client_role, topic_names: sort(topic_names)}"
    # Получаем список ACL из облака
    - name: Получить список ACL из облака
      uri:
        url: "{{ kafka_cloud_order_info }}"
        method: GET
        headers: "{{ kafka_cloud_action_headers }}"
        validate_certs: no
      register: kafka_cloud_acl_list
      check_mode: no
    # Сортируем список ACL по имени
    - name: Установить факт cloud_acl_list
      set_fact:
        cloud_acl_list: "{{ kafka_cloud_acl_list.json|json_query(acl_query)|json_query(acl_query_topic_list) }}"
      vars:
        acl_query: "data[?item_id=='{{ kafka_cloud_item_id }}'].data.config.acls[]"
        acl_query_topic_list: "[?topic_type=='by_name'].{client_cn: client_cn, topic_type: topic_type, client_role: client_role, topic_names: sort(topic_names)}"
    # Получаем разницу между конфигурацией и облаком
    - name: Получить разницу между конфигурацией и облаком
      set_fact:
        acl_diff: "{{ kafka_acl_topic_by_name_list|difference(cloud_acl_list) }}"
    # Устанавливаем факт kafka_cloud_acls_to_create
    - name: Установить факт kafka_cloud_acls_to_create
      set_fact:
        kafka_cloud_acls_to_create: "{{ kafka_cloud_acls_to_create + [{'client_cn': item.client_cn, 'client_role': item.client_role, 'topic_type': item.topic_type, 'topic_names': item.topic_names|difference(cloud_acl_list|json_query(acl_topic_query))}] }}"
      vars:
        acl_topic_query: "[?client_cn=='{{ item.client_cn }}' && client_role=='{{ item.client_role }}'].topic_names[]"
      loop: "{{ acl_diff }}"
    # Удаляем пустые списки ACL
    - name: Удалить пустые списки ACL
      set_fact:
        kafka_cloud_acls_to_create: "{{ kafka_cloud_acls_to_create|json_query(acl_topic_query) }}"
      vars:
        acl_topic_query: '[?not_null(topic_names)]'
    # Создаем ACL в облаке
    - name: Создать ACL в облаке
      uri:
        url: "{{ kafka_cloud_acl_create_url }}"
        method: PATCH
        headers: "{{ kafka_cloud_action_headers }}"
        body: "{{ lookup('template', 'templates/kafka_cloud/kafka-acl-add.j2') }}"
        body_format: json
        validate_certs: no
      register: kafka_cloud_acl_create_response
    # Устанавливаем факт kafka_cloud_action_id
    - name: Установить факт kafka_cloud_action_id
      set_fact:
        kafka_cloud_action_id: "{{ kafka_cloud_acl_create_response.json.action_id }}"
    # Проверяем статус действия
    - name: Проверить статус действия
      include_tasks: kafka-cloud/check-action-status.yml
#    # Создание транзакционной ACL в облаке
#    - name: Создать транзакционную ACL в облаке
#      uri:
#        url: "{{ kafka_cloud_transaction_acl_create_url }}"
#        method: PATCH
#        headers: "{{ kafka_cloud_action_headers }}"
#        body: "{{ lookup('template', 'templates/kafka_cloud/kafka-transaction-acl-add.j2') }}"
#        body_format: json
#        validate_certs: no
#      register: kafka_cloud_transaction_acl_create_response
#    # Установка факта action_id
#    - name: Установить факт action_id
#      set_fact:
#        kafka_cloud_action_id: "{{ kafka_cloud_transaction_acl_create_response.json.action_id }}"
#    # Проверка статуса действия
#    - name: Проверить статус действия
#      include_tasks: kafka-cloud/check-action-status.yml
...