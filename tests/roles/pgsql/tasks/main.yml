---
#- dnf:
#    name: python3-psycopg2
#  become: yes


# Создание пользователя
- name: Drop PostgreSQL user
  postgresql_user:
    db: my_database
    name: my_user
    password: my_password
#    priv: "CONNECT/my_database:ALL"
    login_host: postgres
    login_user: postgres
    login_password: postgres
    state: absent
  ignore_errors: yes

# Удаление БД
- name: Drop PostgreSQL database
  postgresql_db:
    name: my_database
#    owner: my_user
#    priv: "CONNECT/my_database:ALL"
    login_host: postgres
    login_user: postgres
    login_password: postgres
    state: absent
  ignore_errors: yes
      #playbook-1  | TASK [pgsql : Drop PostgreSQL database] ****************************************
      #playbook-1  | An exception occurred during task execution. To see the full traceback, use -vvv. The error was: DETAIL:  There are 3 other sessions using the database.
      #playbook-1  | fatal: [local]: FAILED! => {"changed": false, "msg": "Database query failed: database \"my_database\" is being accessed by other users\nDETAIL:  There are 3 other sessions using the database.\n"}

# Создание БД и назначение владельца
- name: Create PostgreSQL database
  postgresql_db:
    name: my_database
    encoding: UTF-8
#    owner: my_user
#    priv: "CONNECT/my_database:ALL"
    login_host: postgres
    login_user: postgres
    login_password: postgres
    state: present

# Создание пользователя
- name: Create PostgreSQL user
  postgresql_user:
    db: my_database
    name: my_user
    password: my_password
#    priv: "CONNECT/my_database:ALL"
    login_host: postgres
    login_user: postgres
    login_password: postgres
    state: present

# Создание Схемы в БД
- name: Create PostgreSQL schema
  postgresql_schema:
    name: my_schema
    db: my_database
    owner: my_user
#    priv: "CONNECT/my_schema:ALL"
    login_host: postgres
    login_user: postgres
    login_password: postgres

## Создание Схемы в БД
#- name: Create PostgreSQL schema
#  postgresql_schema:
#    name: my_schema
#    db: my_database
#    state: present
##    target: ./my_schema.tar
##    owner: my_user
#    #    priv: "CONNECT/my_schema:ALL"
#    login_host: postgres
#    login_user: postgres
#    login_password: postgres

#- name: Grant privileges to PostgreSQL user
#  postgresql_privs:
#    roles: my_user
#    privs: ALL
#    database: my_database
#    schema: my_schema
#    objs: my_database
#    login_host: postgres
#    login_user: postgres
#    login_password: postgres

- name: Dump DB my_database
  postgresql_db:
    name: my_database
    state: dump
    target: /tmp/dump_db.tar
    login_host: postgres
    login_user: postgres
    login_password: postgres
#  delegate_to: postgres
#
#- name: Restore PostgreSQL schema from dump
#  postgresql_schema:
#    name: my_schema
#    db: my_database
##    state: present
##    target: /tmp/my_schema.sql
#    login_host: postgres
#    login_user: postgres
#    login_password: postgres

# Создание шаблона схемы на основе схемы
- name: Create PostgreSQL schema from template
  postgresql_schema:
    name: my_template_schema
    db: my_database
    state: present
    schema: my_schema
    login_host: postgres
    login_user: postgres
    login_password: postgres

# Пересоздание схемы через шаблон схемы
- name: Drop PostgreSQL schema
  postgresql_schema:
    name: my_schema
    db: my_database
    state: absent
    cascade_drop: yes
#    schema: my_schema
    login_host: postgres
    login_user: postgres
    login_password: postgres

- name: Restore PostgreSQL schema from template
  postgresql_schema:
    name: my_schema
    db: my_database
    owner: my_user
    state: present
    schema: my_template_schema
    login_host: postgres
    login_user: postgres
    login_password: postgres
#  ansible tasks # Создание БД postgresql с установкой и инициалтзацией БД. # Выдача прав на доступ пользователям. # Создание схемы и ее резервная копия с возможностью пересоздания из дампа или шпблона.

#- postgresql_privs:
#    database: my_database
#    state: present
#    privs: ALL
##    type: schema
#    objs: ALL_IN_SCHEMA
#    schema: my_schema
#    roles: my_user
#    grant_option: true
#    login_host: postgres
#    login_user: postgres
#    login_password: postgres


- name: Recreate schema into Dump File
  block:
    # Создание файла дампа БД
    - name: Dump DB my_database schema my_schema
      postgresql_db:
        name: my_database
        state: dump
        target: /tmp/my_database_schema.tar
        target_opts: "-n my_schema"
    #    schema: my_schema
        login_host: postgres
        login_user: postgres
        login_password: postgres

    - name: Drop PostgreSQL schema
      postgresql_schema:
        name: my_schema
        db: my_database
        state: absent
        cascade_drop: yes
        #    schema: my_schema
        login_host: postgres
        login_user: postgres
        login_password: postgres

    - name: Restore DB my_database schema my_schema
      postgresql_db:
        name: my_database
        state: restore
        target: /tmp/my_database_schema.tar
    #    schema: my_schema
        login_host: postgres
        login_user: postgres
        login_password: postgres
          # fixme - отсутствует pg_dump в контейнере ansible
          #playbook-1  | TASK [pgsql : Dump DB my_database] *********************************************
          #playbook-1  | fatal: [local]: FAILED! => {"changed": false, "msg": "Failed to find required executable \"pg_dump\" in paths: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"}

- name: Recreate DB into Dump File tar
  block:
    - name: Dump DB my_database
      postgresql_db:
        name: my_database
        state: dump
        target: /tmp/my_database.tar
        #    schema: my_schema
        login_host: postgres
        login_user: postgres
        login_password: postgres

    - name: Drop PostgreSQL database
      postgresql_db:
        name: my_database
        #    owner: my_user
        #    priv: "CONNECT/my_database:ALL"
        login_host: postgres
        login_user: postgres
        login_password: postgres
        state: absent
      ignore_errors: yes

    # Создание БД и назначение владельца
    - name: Create PostgreSQL database
      postgresql_db:
        name: my_database
        encoding: UTF-8
        #    owner: my_user
        #    priv: "CONNECT/my_database:ALL"
        login_host: postgres
        login_user: postgres
        login_password: postgres
        state: present

    - name: Restore DB my_database
      postgresql_db:
        name: my_database
        state: restore
        target: /tmp/my_database.tar
        #    schema: my_schema
        login_host: postgres
        login_user: postgres
        login_password: postgres


...

#- name: Install PostgreSQL server
#  yum:
#    name: postgresql, systemd
#    state: latest
#
#- name: Initialize PostgreSQL database cluster
#  shell: /usr/bin/postgresql-setup --initdb ; systemctl start postgresql ;

#  ```
#  # Установите необходимые пакеты.
#  dnf install postgresql-server postgresql-contrib
#
#  # Инициализируйте кластер баз данных.
#  /usr/bin/postgresql-setup --initdb
#
#  # Запустите службу PostgreSQL.
#  systemctl start postgresql
#
#  # Включите службу PostgreSQL для запуска при загрузке.
#  systemctl enable postgresql
#
#  # Создайте учетную запись суперпользователя PostgreSQL.
#  sudo -u postgres createuser --superuser my_username
#
#  # Установите пароль для учетной записи суперпользователя PostgreSQL.
#  sudo -u postgres psql -c "ALTER USER my_username WITH PASSWORD 'my_password';"
#
#  # Выйдите из оболочки PostgreSQL.
#  \q
#
#  # Войдите в оболочку PostgreSQL с помощью учетной записи суперпользователя.
#  sudo -u postgres psql
#
#  # Создайте новую базу данных.
#  CREATE DATABASE my_database;
#
#  # Выберите новую базу данных.
#  \c my_database
#
#  # Создайте новую таблицу.
#  CREATE TABLE my_table (
#  id SERIAL PRIMARY KEY,
#  name VARCHAR(255) NOT NULL,
#  email VARCHAR(255) UNIQUE NOT NULL
#  );
#
#  # Вставьте данные в новую таблицу.
#  INSERT INTO my_table (name, email) VALUES
#  ('John Doe', 'johndoe@example.com'),
#  ('Jane Smith', 'janesmith@example.com'),
#  ('Michael Jones', 'michaeljones@example.com');
#
#  # Выберите все данные из новой таблицы.
#  SELECT * FROM my_table;
#
#  # Выйдите из оболочки PostgreSQL.
#  \q
#  ```